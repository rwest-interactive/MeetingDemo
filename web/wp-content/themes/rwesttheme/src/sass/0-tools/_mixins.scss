// Center block
// @import "~sass-mq";
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

@mixin font-smoothing() {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin font-family( $font: $font__main ) {
	font-family: $font__main;
}

/**
 * Add font scale with media query as per configuration on $body-text
 * Ex: @include body-text( h1 );
 * This will add font-size and line-height with different breakpoints.
 */
// @mixin body-text( $level: normal, $body-text: $body-text, $device-size: false ) {
// 	@if type-of($body-text) != "map" {
// 		@error "`#{$body-text}` is not a valid value for $values. It must be a list.";
// 	}

// 	$size: map_get($body-text, $level);

// 	@if type-of($size) == "map" {

// 		@if $device-size == false {
// 			@each $device, $values in $size {

// 				@if $device != "small" {
// 					@include mq($from: $device) {
// 						font-size: map_get($values, "font-size");
// 						line-height: map_get($values, "line-height");
// 					}
// 				} @else {
// 					font-size: map_get($values, "font-size");
// 					line-height: map_get($values, "line-height");
// 				}
// 			}
// 		} @else {
// 			$device_values: map_get($size, $device-size);

// 			font-size: map_get($device_values, "font-size");
// 			line-height: map_get($device_values, "line-height");
// 		}
// 	}
// }
@mixin clearfix{
	&::after {
		visibility: hidden;
		display: block;
		font-size: 0;
		content: '';
		clear: both;
		height: 0;
	}
}

@mixin media($args...) {
  $media-type: 'only screen';
  $media-type-key: 'media-type';
  $args: keywords($args);
  $expr: '';

  @if map-has-key($args, $media-type-key) {
    $media-type: map-get($args, $media-type-key);
    $args: map-remove($args, $media-type-key);
  }

  @each $key, $value in $args {
    @if $value {
      $expr: "#{$expr} and (#{$key}: #{$value})";
    }
  }

  @media #{$media-type} #{$expr} {
    @content;
  }
}

@mixin media-max($max){
  @include media($max-width: ($max - 1)) {
    @content;
  }
}

@mixin media-min($min){
  @include media($min-width: $min) {
    @content;
  }
}
